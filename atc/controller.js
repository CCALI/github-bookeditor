// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'backbone', 'marionette', 'atc/auth', 'atc/models', 'atc/views', 'hbs!atc/layouts/main', 'hbs!atc/layouts/book-view', 'hbs!atc/layouts/content', 'hbs!atc/layouts/workspace', 'exports', 'i18n!atc/nls/strings'], function(jQuery, Backbone, Marionette, Auth, Models, Views, LAYOUT_MAIN, LAYOUT_BOOK_VIEW, LAYOUT_CONTENT, LAYOUT_WORKSPACE, exports, __) {
    var ContentLayout, ContentRouter, HidingRegion, MainLayout, contentLayout, mainArea, mainController, mainLayout, mainRegion, mainSidebar, mainToolbar;
    mainRegion = new Marionette.Region({
      el: '#main'
    });
    HidingRegion = Marionette.Region.extend({
      onShow: function() {
        return this.$el.removeClass('hidden');
      },
      onClose: function() {
        this.ensureEl();
        return this.$el.addClass('hidden');
      }
    });
    MainLayout = Marionette.Layout.extend({
      template: LAYOUT_MAIN,
      regionType: HidingRegion,
      regions: {
        back: '#layout-main-back',
        toolbar: '#layout-main-toolbar',
        auth: '#layout-main-auth',
        sidebar: '#layout-main-sidebar',
        area: '#layout-main-area'
      }
    });
    mainLayout = new MainLayout();
    mainToolbar = mainLayout.toolbar;
    mainSidebar = mainLayout.sidebar;
    mainArea = mainLayout.area;
    ContentLayout = Marionette.Layout.extend({
      template: LAYOUT_CONTENT,
      regions: {
        title: '#layout-title',
        body: '#layout-body',
        metadata: '#layout-metadata',
        roles: '#layout-roles'
      }
    });
    contentLayout = new ContentLayout();
    mainController = {
      start: function() {
        mainRegion.show(mainLayout);
        mainLayout.auth.show(new Views.AuthView({
          model: Auth
        }));
        mainLayout.back.ensureEl();
        mainLayout.back.$el.on('click', function() {
          return Backbone.history.history.back();
        });
        mainSidebar.onClose();
        mainArea.onClose();
        return Backbone.history.start();
      },
      getRegion: function() {
        return mainRegion;
      },
      workspace: function() {
        var view, workspace;
        mainToolbar.close();
        workspace = new Models.SearchResults();
        workspace = new Models.FilteredCollection(null, {
          collection: workspace
        });
        view = new Views.SearchBoxView({
          model: workspace
        });
        mainToolbar.show(view);
        view = new Views.SearchResultsView({
          collection: workspace
        });
        mainArea.show(view);
        Backbone.history.navigate('workspace');
        return workspace.on('change', function() {
          return view.render();
        });
      },
      createContent: function() {
        var content;
        content = new Models.Content();
        this._editContent(content);
        return Backbone.history.navigate('content');
      },
      editModelId: function(id) {
        var model;
        model = Models.ALL_CONTENT.get(id);
        if (!model) {
          return console.warn('Could not find content with that id');
        }
        return this.editModel(model);
      },
      editModel: function(model) {
        switch (model.get('mediaType')) {
          case 'text/x-module':
            return this.editContent(model);
          case 'text/x-collection':
            return this.showBook(model);
          default:
            throw 'BUG: Invalid mediaType';
        }
      },
      showBook: function(model) {
        var _this = this;
        return model.deferred(function(err) {
          var view;
          if (err) {
            return alert('Problem connecting to server');
          }
          mainToolbar.close();
          mainArea.close();
          view = new Views.BookView({
            model: model
          });
          return mainSidebar.show(view);
        });
      },
      editBook: function(model) {
        var _this = this;
        return model.deferred(function(err) {
          var view;
          if (err) {
            return alert('Problem connecting to server');
          }
          mainToolbar.close();
          view = new Views.BookAddContentView({
            model: model
          });
          mainSidebar.show(view);
          view = new Views.BookEditView({
            model: model
          });
          return mainArea.show(view);
        });
      },
      editContent: function(content) {
        var configAccordionDialog, view;
        mainArea.show(contentLayout);
        configAccordionDialog = function(region, view) {
          var dialog,
            _this = this;
          dialog = new Views.DialogWrapper({
            view: view
          });
          region.show(dialog);
          dialog.on('saved', function() {
            return region.$el.parent().collapse('hide');
          });
          return dialog.on('cancelled', function() {
            return region.$el.parent().collapse('hide');
          });
        };
        configAccordionDialog(contentLayout.metadata, new Views.MetadataEditView({
          model: content
        }));
        configAccordionDialog(contentLayout.roles, new Views.RolesEditView({
          model: content
        }));
        view = new Views.ContentToolbarView({
          model: content
        });
        mainToolbar.show(view);
        view = new Views.TitleEditView({
          model: content
        });
        contentLayout.title.show(view);
        contentLayout.title.$el.popover({
          trigger: 'hover',
          placement: 'right',
          content: __('Click to change title')
        });
        view = new Views.ContentEditView({
          model: content
        });
        contentLayout.body.show(view);
        return Backbone.history.navigate("content/" + (content.get('id')));
      }
    };
    ContentRouter = Marionette.AppRouter.extend({
      controller: mainController,
      appRoutes: {
        '': 'workspace',
        'workspace': 'workspace',
        'content': 'createContent',
        'content/:id': 'editModelId'
      }
    });
    new ContentRouter();
    return jQuery.extend(exports, mainController);
  });

}).call(this);
