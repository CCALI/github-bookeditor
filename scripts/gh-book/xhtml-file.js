// Generated by CoffeeScript 1.5.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'jquery', 'backbone', 'jsSHA', 'cs!gh-book/uuid', 'cs!gh-book/binary-file', 'cs!models/content/module', 'cs!collections/content', 'cs!gh-book/utils'], function(_, $, Backbone, jsSHA, uuid, BinaryFile, ModuleModel, allContent, Utils) {
    var XhtmlModel, imgDataSrcToAttributes;
    imgDataSrcToAttributes = function(src) {
      var bits, extension, hash, id, info, mediaType, shaObj, _ref;
      _ref = src.split(','), info = _ref[0], bits = _ref[1];
      mediaType = info.split(';')[0].split(':')[1];
      switch (mediaType) {
        case 'image/png':
          extension = '.png';
          break;
        case 'image/jpeg':
          extension = '.jpg';
          break;
        case 'image/svg':
          extension = '.svg';
          break;
        default:
          extension = '';
      }
      shaObj = new jsSHA(bits, 'TEXT');
      hash = shaObj.getHash('SHA-1', 'HEX');
      id = "resources/" + hash + extension;
      return {
        id: id,
        mediaType: mediaType,
        base64Encoded: bits
      };
    };
    return XhtmlModel = (function(_super) {

      __extends(XhtmlModel, _super);

      function XhtmlModel() {
        XhtmlModel.__super__.constructor.apply(this, arguments);
      }

      XhtmlModel.prototype.mediaType = 'application/xhtml+xml';

      XhtmlModel.prototype.defaults = {
        title: null
      };

      XhtmlModel.prototype.initialize = function() {
        var _ref,
          _this = this;
        XhtmlModel.__super__.initialize.call(this);
        if (!this.id) {
          this.setNew();
        }
        if ((_ref = this.id) == null) {
          this.id = "content/" + (uuid());
        }
        return this.on('change:body', function(model, value, options) {
          var $body;
          $body = jQuery("<div class='unwrap-me'></div>");
          $body.append(value);
          $body.find('img[src^="data:"]:not([data-src])').each(function(i, img) {
            var $img, attrs, imageModel, src;
            $img = $(img);
            src = $img.attr('src');
            attrs = imgDataSrcToAttributes(src);
            if (!allContent.get(attrs.id)) {
              imageModel = new BinaryFile(attrs);
              imageModel.mediaType = attrs.mediaType;
              imageModel._markDirty({}, true);
              return allContent.add(imageModel);
            }
          });
          return _this.set('body', $body[0].innerHTML.trim());
        });
      };

      XhtmlModel.prototype._markDirty = function(options, force) {
        var changed;
        if (force == null) {
          force = false;
        }
        changed = _.omit(this.changedAttributes(), 'title');
        if (!_.isEmpty(changed)) {
          return XhtmlModel.__super__._markDirty.call(this, options, force);
        }
      };

      XhtmlModel.prototype.parse = function(json) {
        var $body, $head, $html, attributes, html, _ref, _ref1;
        this.commitSha = json.sha;
        html = json.content;
        if (!json.content) {
          return {};
        }
        if (!/<body/.test(html)) {
          html = "<body>" + html + "</body>";
        }
        if (!/<html/.test(html)) {
          html = "<html>" + html + "</html>";
        }
        html = html.replace(/html>/g, "prefixhtml>");
        html = html.replace(/<\/head>/g, "</prefixhead>");
        html = html.replace(/<body/g, "<prefixbody");
        html = html.replace(/<\/body/g, "</prefixbody");
        html = html.replace(/<html/g, "<prefixhtml");
        html = html.replace(/<head>/g, "<prefixhead>");
        html = html.replace(/<body/g, "<prefixbody");
        html = html.replace(/<img([^>]*)>/g, '<prefiximg$1 />');
        $html = jQuery(html);
        $head = $html.find('prefixhead');
        $body = $html.find('prefixbody');
        $body.find('prefiximg').each(function(i, img) {
          var $img, $imgHolder, keepSrc, src;
          $imgHolder = jQuery(img);
          src = $imgHolder.attr('src');
          keepSrc = /^https?:/.test(src) || /^data:/.test(src);
          if (!keepSrc) {
            $imgHolder.removeAttr('src');
          }
          $img = jQuery('<img></img>');
          if (!keepSrc) {
            $img.attr('data-src', src);
          }
          $img.attr(Utils.elementAttributes($imgHolder));
          return $imgHolder.replaceWith($img);
        });
        this.loadImages($body);
        attributes = {
          head: (_ref = $head[0]) != null ? _ref.innerHTML.trim() : void 0,
          body: (_ref1 = $body[0]) != null ? _ref1.innerHTML.trim() : void 0
        };
        return attributes;
      };

      XhtmlModel.prototype.loadImages = function($body) {
        var $images, counter,
          _this = this;
        if ($body == null) {
          $body = null;
        }
        if (!$body) {
          $body = $('<div class="unwrap-me"></div>');
          $body.append(this.get('body'));
        }
        $images = $body.find('img[data-src]');
        counter = $images.length;
        return $images.each(function(i, img) {
          var $img, doneLoading, imageModel, path, src;
          $img = jQuery(img);
          src = $img.attr('data-src');
          path = Utils.resolvePath(_this.id, src);
          imageModel = allContent.get(path);
          if (!imageModel) {
            console.error("ERROR: Manifest missing image file " + path);
            counter--;
            if (counter === 0) {
              _this.set('body', $body[0].innerHTML.trim(), {
                parse: true,
                loading: true
              });
            }
            return;
          }
          return doneLoading = imageModel.load().done(function(bytes, statusMessage, xhr) {
            var encoded, mediaType;
            mediaType = imageModel.mediaType;
            encoded = imageModel.get('base64Encoded');
            $img.attr('src', "data:" + mediaType + ";base64," + encoded);
            counter--;
            if (counter === 0) {
              return _this.set('body', $body[0].innerHTML.trim(), {
                parse: true,
                loading: true
              });
            }
          }).fail(function() {
            counter--;
            return $img.attr('src', 'path/to/failure.png');
          });
        });
      };

      XhtmlModel.prototype.serialize = function() {
        var $body, $head, body, bodyHtml, head, headHtml,
          _this = this;
        head = this.get('head');
        body = this.get('body');
        $head = jQuery("<div class='unwrap-me'>" + head + "</div>");
        $body = jQuery("<div class='unwrap-me'>" + body + "</div>");
        $body.find('img[src^="data:"]:not([data-src])').each(function(i, img) {
          var $img, $imgHolder, attrs, imgAbsolutePath, src;
          $img = $(img);
          src = $img.attr('src');
          attrs = imgDataSrcToAttributes(src);
          imgAbsolutePath = attrs.id;
          src = Utils.relativePath(_this.id, imgAbsolutePath);
          $imgHolder = jQuery('<prefiximg></prefiximg>');
          $imgHolder.attr(Utils.elementAttributes($img));
          $imgHolder.attr('src', src);
          return $img.replaceWith($imgHolder);
        });
        $body.find('img[data-src]').each(function(i, img) {
          var $img, $imgHolder, src;
          $img = jQuery(img);
          src = $img.attr('data-src');
          $img.removeAttr('data-src');
          $img.removeAttr('src');
          $imgHolder = jQuery('<prefiximg></prefiximg>');
          $imgHolder.attr(Utils.elementAttributes($img));
          $imgHolder.attr('src', src);
          return $img.replaceWith($imgHolder);
        });
        headHtml = $head[0].innerHTML.trim();
        bodyHtml = $body[0].innerHTML.trim();
        bodyHtml = bodyHtml.replace(/><\/prefiximg/g, '/');
        bodyHtml = bodyHtml.replace(/<prefiximg/g, '<img');
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:epub=\"http://www.idpf.org/2007/ops\">\n  <head>" + ((headHtml != null ? headHtml.trim() : void 0) || '') + "</head>\n  <body>" + ((bodyHtml != null ? bodyHtml.trim() : void 0) || '') + "</body>\n</html>";
      };

      return XhtmlModel;

    })(ModuleModel);
  });

}).call(this);
