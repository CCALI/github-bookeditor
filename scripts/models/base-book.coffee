define [
  'jquery'
  'underscore'
  'backbone'
  'cs!models/deferrable'
], ($, _, Backbone, Deferrable) ->

  # BaseBook (Connexions Collection)
  # =======
  # Represents a "collection" in [Connexions](http://cnx.org) terminology and an `.opf` file in an EPUB
  return Deferrable.extend
    mediaType: 'application/vnd.org.cnx.collection'
    defaults:
      manifest: null
      title: 'Untitled Book'

    # Subclasses can provide a better Collection for storing Content items in a book
    # so the book can listen to changes.
    manifestType: Backbone.Collection

    # Takes an element representing a `<nav epub:type="toc"/>` element
    # and returns a JSON tree with the following structure:
    #
    #     [
    #       {id: 'path/to/file1.html', title: 'Appendix', children: [...] },
    #       {title: 'Unit 3', class: 'unit', children: [...] }
    #     ]
    # See [The toc nav Element](http://idpf.org/epub/30/spec/epub30-contentdocs.html#sec-xhtml-nav-def-types-toc) for more information.
    #
    # This method is also used by the DnD edit view.
    #
    # Example from an ePUB3:
    #
    #     <nav epub:type="toc">
    #       <ol>
    #         <li><a href="path/to/file1.html">Appendix</a></li>
    #         <li class="unit"><span>Unit 3</span><ol>[...]</ol></li>
    #       </ol>
    #     </nav>
    #
    # Example from the Drag-and-Drop Book editor (Tree View):
    #
    #     <div>
    #       <ol>
    #         <li><span data-id="path/to/file1.html">Appendix</a></li>
    #         <li class="unit"><span>Unit 3</span><ol>[...]</ol></li>
    #       </ol>
    #     </nav>
    parseNavTree: (li) ->
      $li = jQuery(li)

      $a = $li.children 'a, span'
      $ol = $li.children 'ol'

      obj = {id: $a.attr('href') or $a.data('id')}

      # Don't set the title if we have not overridden it
      obj.title = $a.text() if !$a.hasClass 'autogenerated-text'

      # The custom class is either set on the `$span` (if parsing from the editor) or on the `$a` (if parsing from an EPUB)
      obj.class = $a.data('class') or $a.not('span').attr('class')

      obj.children = (@parseNavTree(li) for li in $ol.children()) if $ol[0]
      return obj

    # Creates a Manifest collection of all content it should listen to.
    #
    # For example, changes to `id` or `title` of a piece of content will update the navigation tree.
    #
    # Similarly, an update to the navigation tree will create new models.
    initialize: ->
      # Call the super `initialize()`
      Deferrable::initialize.apply(@, arguments)

      @manifest = new @manifestType()
      @navTreeRoot = new BookTocTree()

      # If a model's id changes then update the `navTree` (it was a new model that got saved)
      @listenTo @manifest, 'change:id', (model, newId, options) =>
        oldId = model.previousAttributes().id
        node = @navTreeRoot.descendants.get oldId
        return console.error 'BUG: There is an entry in the tree but no corresponding model in the manifest' if not node
        node.set('id', newId)

      # If a piece of content is linked to in the navigation document
      # always include it in the manifest
      @listenTo @navTreeRoot, 'add:treeNode', (navNode) => @manifest.add navNode.dereference()
      @listenTo @navTreeRoot, 'remove:treeNode', (navNode) => @manifest.remove navNode.dereference()

      # Trigger a change so `save` works
      @listenTo @navTreeRoot, 'add:treeNode',    (navNode) => @trigger 'add:treeNode', @
      @listenTo @navTreeRoot, 'remove:treeNode', (navNode) => @trigger 'remove:treeNode', @
      @listenTo @navTreeRoot, 'change:treeNode', (navNode) =>
        @trigger 'change:treeNode', @
        @trigger 'change', @

      # Do this last so `.toJSON()` has the `navTreeRoot` already initialized
      # REFACTOR # ALL_CONTENT.add @

    # Used by the Drag-and-Drop to decide which types can be dropped and
    # by `AddView` to decide which child mediaTypes can be added
    # REFACTOR # accepts: -> [ BookTocNode::mediaType, BaseContent::mediaType, Folder::mediaType ]
    # Used by the TreeView to render the children of this book
    children: -> @navTreeRoot.children()
    addChild: (model, at=0) -> @navTreeRoot.addChild(model, at)
